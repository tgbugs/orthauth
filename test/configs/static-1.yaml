config-search-paths:  # search ends when the first path is found
  - dynamic-1.yaml
  - '{:user-config-path}/program-name/config.yaml'
  - /etc/program-name/config.{py,yaml,json,sxml,rkt,lisp,json,xml}
default-paths:  # suggested locations for default paths when generating a blank user config
  secrets: '{:user-config-path}/program-name/secrets.yaml'
  config: '{:user-config-path}/program-name/config.yaml'
auth-variables:  # insecure static variables
  # a dynamic configs + auth store combination should always be able to return a value for each of these
  test-config-vars: [
    '{:cwd}/share/orthauth/.does-not-exist',
    '{:prefix}/share/orthauth/.does-not-exist',
    '{:user-cache-path}/orthauth/.does-not-exist',
    '{:user-config-path}/orthauth/.does-not-exist',
    '{:user-data-path}/orthauth/.does-not-exist',
    '{:user-log-path}/orthauth/.does-not-exist']
  test-null-path: null
  test-alt-config-single:
  test-alt-config-single-rename:
  test-top-level-alt-config:
  test-top-level-alt-config-rename:
  test-expanduser: ~/
  default-example:
    environment-variables: EV
    default: 42
  env-example:
    environment-variables: IMPLICITLY_SHADING_VARIABLES USER GROUP
    shaded: ENV_VAR_SHADED_BY_PATHS  # XXX
  env-list-example:
    environment-variables:
      - MY
      - LIST
      - IS
      - QUITE
      - LONG
      - GROUP
  paths-example:  # path must be defined in the user config otherwise failure will ensue
  full-complexity-example:
    environment-variables: ENV_FROM_STATIC
    path: suggest path
  paths-as-list-example:
    path: ['k1', 'k2']
  test-multi-path-1: [
    'path/does/not/exist/file.ext',
    'static-1.yaml']
  test-multi-path-2: [
    'path/does/not/exist/file.ext',
    'static-1.yaml']
  test-multi-path-3:
  test-as-property:
  test-at-init:
  test-after-init:
  test-tang-init:
  test-value-1: a static value
  test-value-2: a value that will be overwritten
